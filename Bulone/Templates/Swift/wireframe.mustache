import UIKit

class {{ module }}WireFrame: {{ module }}WireFrameProtocol {

    class func present{{ module }}Module(inWindow window: UIWindow) {
        let view = assemble()
        window.rootViewController = view
    }

    class func push{{ module }}Module(toNavigationController nvc: UINavigationController, animated: Bool) {
        let view = assemble()
        nvc.pushViewController(view, animated: animated)
    }

}

internal extension {{ module }}WireFrame {

    internal class func assemble() -> {{ module }}View {

        // Generating module components
        let view: {{ module }}ViewProtocol = {{ module }}View()
        let presenter: {{ module }}PresenterProtocol & {{ module }}InteractorOutputProtocol = {{ module }}Presenter()
        let interactor: {{ module }}InteractorInputProtocol = {{ module }}Interactor()
        let dataManager: {{ module }}DataManagerInputProtocol = {{ module }}DataManager()
        let wireFrame: {{ module }}WireFrameProtocol = {{ module }}WireFrame()

        // Connecting
        view.presenter = presenter
        presenter.view = view
        presenter.wireFrame = wireFrame
        presenter.interactor = interactor
        interactor.presenter = presenter
        interactor.dataManager = dataManager

        return view as! {{ module }}View

    }

}
